'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GL_BUFFER_USAGE = exports.GL_TARGETS = exports.GL_DRAW_MODES = exports.GL_INDEX_TYPES = undefined;
exports.isWebGLRenderingContext = isWebGLRenderingContext;
exports.isWebGL2RenderingContext = isWebGL2RenderingContext;
exports.assertWebGLRenderingContext = assertWebGLRenderingContext;
exports.assertWebGL2RenderingContext = assertWebGL2RenderingContext;
exports.glKey = glKey;
exports.isIndexType = isIndexType;
exports.assertIndexType = assertIndexType;
exports.isDrawMode = isDrawMode;
exports.assertDrawMode = assertDrawMode;
exports.glTypeFromArray = glTypeFromArray;
exports.assertArrayTypeMatch = assertArrayTypeMatch;
exports.glArrayFromType = glArrayFromType;

var _webglTypes = require('./webgl-types');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Helper definitions for validation of webgl parameters
/* eslint-disable no-inline-comments, max-len */


var ERR_CONTEXT = 'Invalid WebGLRenderingContext';
var ERR_WEBGL2 = 'Requires WebGL2';

function isWebGLRenderingContext(gl) {
  return gl instanceof _webglTypes.WebGLRenderingContext || gl && gl.ARRAY_BUFFER === 0x8892;
}

function isWebGL2RenderingContext(gl) {
  return gl instanceof _webglTypes.WebGL2RenderingContext || gl && gl.TEXTURE_BINDING_3D === 0x806A;
}

function assertWebGLRenderingContext(gl) {
  // Need to handle debug context
  (0, _assert2.default)(isWebGLRenderingContext(gl), ERR_CONTEXT);
}

function assertWebGL2RenderingContext(gl) {
  // Need to handle debug context
  (0, _assert2.default)(isWebGL2RenderingContext(gl), ERR_WEBGL2);
}

// INDEX TYPES

// TODO - move to glGet
function glKey(value) {
  for (var key in _webglTypes.WebGL) {
    if (_webglTypes.WebGL[key] === value) {
      return key;
    }
  }
  return String(value);
}

// For drawElements, size of indices
var GL_INDEX_TYPES = exports.GL_INDEX_TYPES = ['UNSIGNED_BYTE', 'UNSIGNED_SHORT', 'UNSIGNED_INT'].map(function (constant) {
  return _webglTypes.WebGL[constant];
});

function isIndexType(type) {
  return GL_INDEX_TYPES.indexOf(type) !== -1;
}

function assertIndexType(glType, source) {
  (0, _assert2.default)(isIndexType(glType), 'Bad index type gl.' + glKey(glType) + ' ' + source);
}

// DRAW MODES

var GL_DRAW_MODES = exports.GL_DRAW_MODES = ['POINTS', 'LINE_STRIP', 'LINE_LOOP', 'LINES', 'TRIANGLE_STRIP', 'TRIANGLE_FAN', 'TRIANGLES'].map(function (constant) {
  return _webglTypes.WebGL[constant];
});

function isDrawMode(glMode) {
  return GL_DRAW_MODES.indexOf(glMode) !== -1;
}

function assertDrawMode(glType, source) {
  (0, _assert2.default)(isDrawMode(glType), 'Bad draw mode gl.' + glKey(glType) + ' ' + source);
}

// TARGET TYPES

var GL_TARGETS = exports.GL_TARGETS = ['ARRAY_BUFFER', // vertex attributes (e.g. vertex/texture coords or color)
'ELEMENT_ARRAY_BUFFER', // Buffer used for element indices.
// For WebGL 2 contexts
'COPY_READ_BUFFER', // Buffer for copying from one buffer object to another
'COPY_WRITE_BUFFER', // Buffer for copying from one buffer object to another
'TRANSFORM_FEEDBACK_BUFFER', // Buffer for transform feedback operations
'UNIFORM_BUFFER', // Buffer used for storing uniform blocks
'PIXEL_PACK_BUFFER', // Buffer used for pixel transfer operations
'PIXEL_UNPACK_BUFFER' // Buffer used for pixel transfer operations
].map(function (constant) {
  return _webglTypes.WebGL[constant];
}).filter(function (constant) {
  return constant;
});

// USAGE TYPES

var GL_BUFFER_USAGE = exports.GL_BUFFER_USAGE = ['STATIC_DRAW', // Buffer used often and not change often. Contents are written to the buffer, but not read.
'DYNAMIC_DRAW', // Buffer used often and change often. Contents are written to the buffer, but not read.
'STREAM_DRAW', // Buffer not used often. Contents are written to the buffer, but not read.
// For WebGL 2 contexts
'STATIC_READ', // Buffer used often and not change often. Contents are read from the buffer, but not written.
'DYNAMIC_READ', // Buffer used often and change often. Contents are read from the buffer, but not written.
'STREAM_READ', // Contents of the buffer are likely to not be used often. Contents are read from the buffer, but not written.
'STATIC_COPY', // Buffer used often and not change often. Contents are neither written or read by the user.
'DYNAMIC_COPY', // Buffer used often and change often. Contents are neither written or read by the user.
'STREAM_COPY' // Buffer used often and not change often. Contents are neither written or read by the user.
].map(function (constant) {
  return _webglTypes.WebGL[constant];
}).filter(function (constant) {
  return constant;
});

function glTypeFromArray(array) {
  // Sorted in some order of likelihood to reduce amount of comparisons
  if (array instanceof Float32Array) {
    return _webglTypes.WebGL.FLOAT;
  } else if (array instanceof Uint16Array) {
    return _webglTypes.WebGL.UNSIGNED_SHORT;
  } else if (array instanceof Uint32Array) {
    return _webglTypes.WebGL.UNSIGNED_INT;
  } else if (array instanceof Uint8Array) {
    return _webglTypes.WebGL.UNSIGNED_BYTE;
  } else if (array instanceof Uint8ClampedArray) {
    return _webglTypes.WebGL.UNSIGNED_BYTE;
  } else if (array instanceof Int8Array) {
    return _webglTypes.WebGL.BYTE;
  } else if (array instanceof Int16Array) {
    return _webglTypes.WebGL.SHORT;
  } else if (array instanceof Int32Array) {
    return _webglTypes.WebGL.INT;
  }
  throw new Error('Failed to deduce WebGL type from array');
}

function assertArrayTypeMatch(array, type, source) {
  (0, _assert2.default)(type === glTypeFromArray(array), (array.constructor.name || 'Array') + ' ' + ('does not match element type gl.' + glKey(type) + ' ' + source));
}

/* eslint-disable complexity */
function glArrayFromType(glType) {
  var clamped = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

  // Sorted in some order of likelihood to reduce amount of comparisons
  switch (glType) {
    case _webglTypes.WebGL.FLOAT:
      return Float32Array;
    case _webglTypes.WebGL.UNSIGNED_SHORT:
    case _webglTypes.WebGL.UNSIGNED_SHORT_5_6_5:
    case _webglTypes.WebGL.UNSIGNED_SHORT_4_4_4_4:
    case _webglTypes.WebGL.UNSIGNED_SHORT_5_5_5_1:
      return Uint16Array;
    case _webglTypes.WebGL.UNSIGNED_INT:
      // case WebGL.UNSIGNED_INT_2_10_10_10_REV:
      // case WebGL.UNSIGNED_INT_10F_11F_11F_REV:
      // case WebGL.UNSIGNED_INT_5_9_9_9_REV:
      // case WebGL.UNSIGNED_INT_24_8:
      return Uint32Array;
    case _webglTypes.WebGL.UNSIGNED_BYTE:
      return clamped ? Uint8ClampedArray : Uint8Array;
    case _webglTypes.WebGL.BYTE:
      return Int8Array;
    case _webglTypes.WebGL.SHORT:
      return Int16Array;
    case _webglTypes.WebGL.INT:
      return Int32Array;

    default:
      throw new Error('Failed to deduce type from array');
  }
}
/* eslint-enable complexity */
//# sourceMappingURL=data:application/json;base64,