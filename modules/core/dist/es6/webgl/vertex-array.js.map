{"version":3,"sources":["../../../src/webgl/vertex-array.js"],"names":["Accessor","Buffer","VertexArrayObject","log","assert","stubRemovedMethods","ERR_ATTRIBUTE_TYPE","VertexArray","constructor","gl","opts","id","program","configuration","elements","values","accessors","unused","drawParams","buffer","vertexArrayObject","isSupported","getDefaultArray","initialize","Object","seal","delete","props","reset","bindOnUse","setProps","MAX_ATTRIBUTES","Array","fill","setAttributes","attributes","setElementBuffer","clearDrawParams","getDrawParams","appParameters","_updateDrawParams","assign","_updateAttributeZeroBuffer","bind","locationOrName","value","setBuffer","isArray","length","accessor","ArrayBuffer","isView","setConstant","Error","bindBuffer","elementBuffer","isDefaultArray","appAccessor","target","_resolveLocationAndAccessor","location","arrayValue","_normalizeConstantArrayValue","enable","unbindBuffers","size","disableVertexAttribArray","handle","vertexAttribPointer","bindBuffers","bindForDraw","vertexCount","func","_setConstantAttributes","hasVertexArrays","valueAccessor","_getAttributeIndex","Number","isFinite","once","accessInfo","_getAttributeInfo","resolve","type","attributeName","getAttributeInfo","getAttributeLocation","constant","_setConstantAttributeZero","_setConstantAttribute","constantAttributeZero","getConstantBuffer","isDefault","instanceCount","elementCount","Math","max","isIndexed","isInstanced","indexCount","Infinity","_updateDrawParamsForLocation","getElementCount","indexType","divisor","getVertexCount","min","setElements","deprecated"],"mappings":"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","sourcesContent":["// VertexArray class\n\nimport GL from '../constants';\nimport Accessor from './accessor';\nimport Buffer from './buffer';\nimport VertexArrayObject from './vertex-array-object';\nimport {log, assert} from '../utils';\nimport {stubRemovedMethods} from '../utils';\n\nconst ERR_ATTRIBUTE_TYPE =\n  'VertexArray: attributes must be Buffers or constants (i.e. typed array)';\n\nexport default class VertexArray {\n  constructor(gl, opts = {}) {\n    // Use program's id if program is supplied but no id is supplied\n    const id = opts.id || opts.program && opts.program.id;\n    // super(gl, Object.assign({}, opts, {id}));\n\n    this.id = id;\n    this.gl = gl;\n    this.configuration = null;\n\n    // Extracted information\n    this.elements = null;\n    this.values = null;\n    this.accessors = null;\n    this.unused = null;\n    this.drawParams = null;\n    this.buffer = null; // For attribute 0 on desktops, and created when unbinding buffers\n\n    this.vertexArrayObject = VertexArrayObject.isSupported(gl) ?\n      new VertexArrayObject(gl) :\n      VertexArrayObject.getDefaultArray(gl);\n\n    // Issue errors when using removed methods\n    stubRemovedMethods(this, 'VertexArray', 'v6.0', [\n      'setBuffers', 'setGeneric', 'clearBindings', 'setLocations', 'setGenericValues',\n      'setDivisor', 'enable', 'disable'\n    ]);\n\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  delete() {\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n  }\n\n  initialize(props = {}) {\n    this.reset();\n    this.configuration = null;\n    this.bindOnUse = false;\n    return this.setProps(props);\n  }\n\n  // Resets all attributes (to default valued constants)\n  reset() {\n    // this.vertexArrayObject.reset();\n\n    this.elements = null;\n    const {MAX_ATTRIBUTES} = this.vertexArrayObject;\n    this.values = new Array(MAX_ATTRIBUTES).fill(null);\n    this.accessors = new Array(MAX_ATTRIBUTES).fill(null);\n    this.unused = {};\n\n    // Auto detects draw params\n    this.drawParams = null;\n\n    return this;\n  }\n\n  setProps(props) {\n    if ('program' in props) {\n      this.configuration = props.program && props.program.configuration;\n    }\n    if ('configuration' in props) {\n      this.configuration = props.configuration;\n    }\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n    if ('elements' in props) {\n      this.setElementBuffer(props.elements);\n    }\n    if ('bindOnUse' in props) {\n      props = props.bindOnUse;\n    }\n    return this;\n  }\n\n  // Automatically called if buffers changed through VertexArray API\n  clearDrawParams() {\n    this.drawParams = null;\n  }\n\n  getDrawParams(appParameters) {\n    // Auto deduced draw parameters\n    this.drawParams = this.drawParams || this._updateDrawParams();\n\n    // Override with any application supplied draw parameters\n    const drawParams = Object.assign({}, this.drawParams, appParameters);\n\n    this._updateAttributeZeroBuffer(drawParams);\n    return drawParams;\n  }\n\n  // Set (bind) an array or map of vertex array buffers, either in numbered or named locations.\n  // For names that are not present in `location`, the supplied buffers will be ignored.\n  // if a single buffer of type GL.ELEMENT_ARRAY_BUFFER is present, it will be set as elements\n  //   Signatures:\n  //     {attributeName: buffer}\n  //     {attributeName: [buffer, accessor]}\n  //     {attributeName: (typed) array} => constant\n  setAttributes(attributes) {\n    this.vertexArrayObject.bind(() => {\n      for (const locationOrName in attributes) {\n        const value = attributes[locationOrName];\n        if (value instanceof Buffer) {\n          //  Signature: attributeName: buffer\n          this.setBuffer(locationOrName, value);\n        } else if (Array.isArray(value) && value.length && value[0] instanceof Buffer) {\n          // Signature: attributeName: [buffer, accessor]\n          const buffer = value[0];\n          const accessor = value[1];\n          this.setBuffer(locationOrName, buffer, accessor);\n        } else if (ArrayBuffer.isView(value) || Array.isArray(value)) {\n          //  Signature: attributeName: (short) (typed) array => constant\n          this.setConstant(locationOrName, value);\n        } else {\n          throw new Error(ERR_ATTRIBUTE_TYPE);\n        }\n      }\n\n      // Make sure we don't leave any bindings\n      this.gl.bindBuffer(GL.ARRAY_BUFFER, null);\n    });\n\n    return this;\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported\n  setElementBuffer(elementBuffer = null, accessor = {}) {\n    this.elements = elementBuffer; // Save value for debugging\n    this.clearDrawParams();\n\n    // Update vertexArray immediately if we have our own array\n    if (!this.vertexArrayObject.isDefaultArray) {\n      this.vertexArrayObject.setElementBuffer(elementBuffer, accessor);\n    }\n    return this;\n  }\n\n  // Set a location in vertex attributes array to a buffer\n  setBuffer(locationOrName, buffer, appAccessor = {}) {\n    // Check target\n    if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n      return this.setElementBuffer(buffer);\n    }\n\n    const {location, accessor} =\n      this._resolveLocationAndAccessor(locationOrName, buffer, buffer.accessor, appAccessor);\n\n    if (location >= 0) {\n      this.values[location] = buffer;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n\n      // Update vertexArray immediately if we have our own array\n      if (!this.vertexArrayObject.isDefaultArray) {\n        this.vertexArrayObject.setBuffer(location, buffer, accessor);\n      }\n    }\n\n    return this;\n  }\n\n  // Set attribute to constant value (small typed array corresponding to one vertex' worth of data)\n  setConstant(locationOrName, arrayValue, appAccessor = {}) {\n    const {location, accessor} =\n      this._resolveLocationAndAccessor(locationOrName, arrayValue, appAccessor);\n\n    if (location >= 0) {\n      arrayValue = this.vertexArrayObject._normalizeConstantArrayValue(arrayValue, accessor);\n\n      this.values[location] = arrayValue;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n\n      // Update vertexArray immediately if we have our own array\n      // NOTE: We set the actual constant value later on bind. We can't set the value now since\n      // constants are global and affect all other VertexArrays that have disabled attributes\n      // in the same location.\n      // We do disable the attribute which makes it use the global constant value at that location\n      if (!this.vertexArrayObject.isDefaultArray) {\n        this.vertexArrayObject.enable(location, false);\n      }\n    }\n\n    return this;\n  }\n\n  // Workaround for Chrome TransformFeedback binding issue\n  // If required, unbind temporarily to avoid conflicting with TransformFeedback\n  unbindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.setElementBuffer(null);\n      }\n\n      // Chrome does not like buffers that are bound to several binding points,\n      // so we need to offer and unbind facility\n      // WebGL offers disabling, but no clear way to set a VertexArray buffer to `null`\n      // So we just bind all the attributes to the dummy \"attribute zero\" buffer\n      this.buffer = this.buffer || new Buffer(this.gl, {size: 4});\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        if (this.values[location] instanceof Buffer) {\n          this.gl.disableVertexAttribArray(location);\n          this.gl.bindBuffer(GL.ARRAY_BUFFER, this.buffer.handle);\n          this.gl.vertexAttribPointer(location, 1, GL.FLOAT, false, 0, 0);\n        }\n      }\n    });\n    return this;\n  }\n\n  // Workaround for Chrome TransformFeedback binding issue\n  // If required, rebind rebind after temporary unbind\n  bindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.setElementBuffer(this.elements);\n      }\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        const buffer = this.values[location];\n        if (buffer instanceof Buffer) {\n          this.setBuffer(location, buffer);\n        }\n      }\n    });\n    return this;\n  }\n\n  // Bind for use\n  // When a vertex array is about to be used, we must:\n  // - Set constant attributes (since these are stored on the context and reset on bind)\n  // - Check if we need to initialize the buffer\n  bindForDraw(vertexCount, func) {\n    let value;\n\n    this.vertexArrayObject.bind(() => {\n\n      // Make sure that any constant attributes are updated (stored on the context, not the VAO)\n      // Also handles attribute 0\n      this._setConstantAttributes(vertexCount);\n\n      if (!this.vertexArrayObject.hasVertexArrays) {\n        this.bindBuffers();\n      }\n\n      value = func();\n\n      if (!this.vertexArrayObject.hasVertexArrays) {\n        this.unbindBuffers();\n      }\n\n    });\n\n    return value;\n  }\n\n  // PRIVATE\n\n  // Resolve locations and accessors\n  _resolveLocationAndAccessor(locationOrName, value, valueAccessor, appAccessor) {\n    const location = this._getAttributeIndex(locationOrName);\n    if (!Number.isFinite(location) || location < 0) {\n      this.unused[locationOrName] = value;\n      log.once(3, () => `unused value ${locationOrName} in ${this.id}`)();\n      return this;\n    }\n\n    const accessInfo = this._getAttributeInfo(locationOrName);\n\n    // Resolve the partial accessors into a final accessor\n    const accessor = Accessor.resolve(accessInfo.accessor, valueAccessor, appAccessor);\n\n    const {size, type} = accessor;\n    assert(Number.isFinite(size) && Number.isFinite(type));\n\n    return {location, accessor};\n  }\n\n  _getAttributeInfo(attributeName) {\n    return this.configuration && this.configuration.getAttributeInfo(attributeName);\n  }\n\n  _getAttributeIndex(locationOrName) {\n    if (this.configuration) {\n      return this.configuration.getAttributeLocation(locationOrName);\n    }\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return location;\n    }\n    return -1;\n  }\n\n  // Updates all constant attribute values (constants are used when vertex attributes are disabled).\n  // This needs to be done repeatedly since in contrast to buffer bindings,\n  // constants are stored on the WebGL context, not the VAO\n  _setConstantAttributes(vertexCount) {\n    let constant = this.values[0];\n    if (ArrayBuffer.isView(constant)) {\n      this._setConstantAttributeZero(constant, vertexCount);\n    }\n\n    for (let location = 1; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      constant = this.values[location];\n      if (ArrayBuffer.isView(constant)) {\n        this._setConstantAttribute(location, constant);\n      }\n    }\n  }\n\n  _setConstantAttributeZero(constant, vertexCount) {\n    if (VertexArrayObject.isSupported(this.gl, {constantAttributeZero: true})) {\n      this._setConstantAttribute(0, constant);\n      return;\n    }\n\n    // Get a dummy buffer populated with repeated constants\n    const buffer = this.vertexArrayObject.getConstantBuffer(vertexCount);\n\n    // Set the buffer on location 0\n    this.vertexArrayObject.setBuffer(0, buffer, this.accessors[0]);\n  }\n\n  _setConstantAttribute(location, constant) {\n    VertexArrayObject.setConstant(this.gl, location, constant);\n\n    // If we are using the global VertexArrayObject, we need to disable the attribute now\n    if (this.vertexArrayObject.isDefault) {\n      this.vertexArrayObject.enable(location, false);\n    }\n  }\n\n  // NOTE: Desktop OpenGL cannot disable attribute 0\n  // https://stackoverflow.com/questions/20305231/webgl-warning-attribute-0-is-disabled-\n  // this-has-significant-performance-penalt\n  _updateAttributeZeroBuffer({vertexCount, instanceCount}) {\n    // TODO - Determine required length\n    const elementCount = Math.max(vertexCount | 0, instanceCount | 0);\n\n    // Create buffer only when needed, and reuse it (avoids inflating buffer creation statistics)\n    const constant = this.values[0];\n    if (ArrayBuffer.isView(constant)) {\n      const size = elementCount;\n      this.buffer = this.buffer || new Buffer(this.gl, {size});\n    }\n  }\n\n  // Walks the buffers and updates draw parameters\n  _updateDrawParams() {\n    const drawParams = {\n      isIndexed: false,\n      isInstanced: false,\n      indexCount: Infinity,\n      vertexCount: Infinity,\n      instanceCount: Infinity\n    };\n\n    for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      this._updateDrawParamsForLocation(drawParams, location);\n    }\n\n    if (this.elements) {\n      // indexing is autodetected - buffer with target GL.ELEMENT_ARRAY_BUFFER\n      // index type is saved for drawElement calls\n      drawParams.elementCount = this.elements.getElementCount(this.elements.accessor);\n      drawParams.isIndexed = true;\n      drawParams.indexType = this.elements.accessor.type;\n    }\n\n    // Post-calculation checks\n    if (drawParams.indexCount === Infinity) {\n      drawParams.indexCount = 0;\n    }\n    if (drawParams.vertexCount === Infinity) {\n      drawParams.vertexCount = 0;\n    }\n    if (drawParams.instanceCount === Infinity) {\n      drawParams.instanceCount = 0;\n    }\n\n    return drawParams;\n  }\n\n  _updateDrawParamsForLocation(drawParams, location) {\n    const value = this.values[location];\n    const accessor = this.accessors[location];\n\n    if (!value) {\n      return;\n    }\n\n    // Check if instanced (whether buffer or constant)\n    const {divisor} = accessor;\n    const isInstanced = divisor > 0;\n    drawParams.isInstanced = drawParams.isInstanced || isInstanced;\n\n    if (value instanceof Buffer) {\n      const buffer = value;\n\n      if (isInstanced) {\n        // instance attribute\n        const instanceCount = buffer.getVertexCount(accessor);\n        drawParams.instanceCount = Math.min(drawParams.instanceCount, instanceCount);\n      } else {\n        // normal attribute\n        const vertexCount = buffer.getVertexCount(accessor);\n        drawParams.vertexCount = Math.min(drawParams.vertexCount, vertexCount);\n      }\n    }\n  }\n\n  // DEPRECATED\n\n  setElements(elementBuffer = null, accessor = {}) {\n    log.deprecated('setElements', 'setElementBuffer');\n    return this.setElementBuffer(elementBuffer, accessor);\n  }\n}\n"],"file":"vertex-array.js"}