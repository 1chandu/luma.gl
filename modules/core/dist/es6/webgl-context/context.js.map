{"version":3,"sources":["../../../src/webgl-context/context.js"],"names":["WebGLRenderingContext","WebGL2RenderingContext","createHeadlessContext","getCanvas","createBrowserContext","trackContextState","makeDebugContext","glGetDebugInfo","queryManager","log","isBrowser","assert","GL_ARRAY_BUFFER","GL_TEXTURE_BINDING_3D","ERR_CONTEXT","ERR_WEBGL","ERR_WEBGL2","isWebGL","gl","Boolean","isWebGL2","assertWebGLContext","assertWebGL2Context","contextDefaults","webgl2","webgl1","throwOnFailure","manageState","canvas","debug","width","height","setContextDefaults","opts","Object","assign","createGLContext","throwOnError","onError","message","Error","targetCanvas","copyState","args","priority","Math","max","logInfo","destroyGLContext","ext","getExtension","destroy","resizeGLContext","devicePixelRatio","useDevicePixels","window","clientWidth","clientHeight","resize","pollGLContext","poll","webGL","info","driver","vendor","renderer","once"],"mappings":"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","sourcesContent":["/* eslint-disable quotes */\n// WebGLRenderingContext related methods\nimport {WebGLRenderingContext, WebGL2RenderingContext} from '../webgl-utils';\nimport {createHeadlessContext} from './create-headless-context';\nimport {getCanvas} from './create-canvas';\nimport {createBrowserContext} from './create-browser-context';\nimport trackContextState from './track-context-state';\nimport {makeDebugContext} from './debug-context';\nimport {glGetDebugInfo} from './context-limits';\nimport queryManager from '../webgl-utils/query-manager';\n\nimport {log, isBrowser} from '../utils';\nimport assert from '../utils/assert';\n\n// Heuristic testing of contexts (to indentify debug wrappers around gl contexts)\nconst GL_ARRAY_BUFFER = 0x8892;\nconst GL_TEXTURE_BINDING_3D = 0x806A;\n\nexport const ERR_CONTEXT = 'Invalid WebGLRenderingContext';\nexport const ERR_WEBGL = ERR_CONTEXT;\nexport const ERR_WEBGL2 = 'Requires WebGL2';\n\nexport function isWebGL(gl) {\n  return Boolean(gl && (\n    gl instanceof WebGLRenderingContext ||\n    gl.ARRAY_BUFFER === GL_ARRAY_BUFFER\n  ));\n}\n\nexport function isWebGL2(gl) {\n  return Boolean(gl && (\n    gl instanceof WebGL2RenderingContext ||\n    gl.TEXTURE_BINDING_3D === GL_TEXTURE_BINDING_3D\n  ));\n}\n\nexport function assertWebGLContext(gl) {\n  // Need to handle debug context\n  assert(isWebGL(gl), ERR_CONTEXT);\n}\n\nexport function assertWebGL2Context(gl) {\n  // Need to handle debug context\n  assert(isWebGL2(gl), ERR_WEBGL2);\n}\n\nconst contextDefaults = {\n  // COMMON CONTEXT PARAMETERS\n  // Attempt to allocate WebGL2 context\n  webgl2: true, // Attempt to create a WebGL2 context (false to force webgl1)\n  webgl1: true,  // Attempt to create a WebGL1 context (false to fail if webgl2 not available)\n  throwOnFailure: true,\n  manageState: true,\n  // BROWSER CONTEXT PARAMETERS\n  canvas: null, // A canvas element or a canvas string id\n  debug: false, // Instrument context (at the expense of performance)\n  // HEADLESS CONTEXT PARAMETERS\n  width: 800, // width are height are only used by headless gl\n  height: 600\n  // WEBGL/HEADLESS CONTEXT PARAMETERS\n  // Remaining options are passed through to context creator\n};\n\n/*\n * Change default context creation parameters.\n * Main use case is regression test suite.\n */\nexport function setContextDefaults(opts = {}) {\n  Object.assign(contextDefaults, {width: 1, height: 1}, opts);\n}\n\n/*\n * Creates a context giving access to the WebGL API\n */\n/* eslint-disable complexity, max-statements */\nexport function createGLContext(opts = {}) {\n  opts = Object.assign({}, contextDefaults, opts);\n  const {canvas, width, height, throwOnError, manageState, debug} = opts;\n\n  // Error reporting function, enables exceptions to be disabled\n  function onError(message) {\n    if (throwOnError) {\n      throw new Error(message);\n    }\n    // log.log(0, message)();\n    return null;\n  }\n\n  let gl;\n  if (isBrowser) {\n    // Get or create a canvas\n    const targetCanvas = getCanvas({canvas, width, height, onError});\n    // Create a WebGL context in the canvas\n    gl = createBrowserContext({canvas: targetCanvas, opts});\n  } else {\n    // Create a headless-gl context under Node.js\n    gl = createHeadlessContext({width, height, opts, onError});\n  }\n  if (!gl) {\n    return null;\n  }\n\n  // Install context state tracking\n  if (manageState) {\n    trackContextState(gl, {\n      copyState: false,\n      log: (...args) => log.log(1, ...args)()\n    });\n  }\n\n  // Add debug instrumentation to the context\n  if (isBrowser && debug) {\n    gl = makeDebugContext(gl, {debug});\n    // Debug forces log level to at least 1\n    log.priority = Math.max(log.priority, 1);\n    // Log some debug info about the context\n  }\n\n  // Log context information\n  logInfo(gl);\n\n  // Add to seer integration\n  return gl;\n}\n\nexport function destroyGLContext(gl) {\n  // TODO - Remove from seer integration\n\n  // TODO - Unregister any tracking/polyfills\n\n  // There is no way to delete browser based context\n\n  // Destroy headless gl context\n  const ext = gl.getExtension('STACKGL_destroy_context');\n  if (ext) {\n    ext.destroy();\n  }\n}\n\n/**\n * Resize the canvas' drawing buffer.\n *\n * Can match the canvas CSS size, and optionally also consider devicePixelRatio\n * Can be called every frame\n *\n * Regardless of size, the drawing buffer will always be scaled to the viewport, but\n * for best visual results, usually set to either:\n *  canvas CSS width x canvas CSS height\n *  canvas CSS width * devicePixelRatio x canvas CSS height * devicePixelRatio\n * See http://webgl2fundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html\n *\n * resizeGLContext(gl, {width, height, useDevicePixels})\n */\nexport function resizeGLContext(gl, opts = {}) {\n  // Resize browser context\n  if (gl.canvas) {\n    /* global window */\n    const devicePixelRatio = opts.useDevicePixels ? window.devicePixelRatio || 1 : 1;\n\n    const width = `width` in opts ? opts.width : gl.canvas.clientWidth;\n    const height = `height` in opts ? opts.height : gl.canvas.clientHeight;\n\n    gl.canvas.width = width * devicePixelRatio;\n    gl.canvas.height = height * devicePixelRatio;\n\n    return;\n  }\n\n  // Resize headless gl context\n  const ext = gl.getExtension('STACKGL_resize_drawingbuffer');\n  if (ext && `width` in opts && `height` in opts) {\n    ext.resize(opts.width, opts.height);\n  }\n}\n\n// POLLING FOR PENDING QUERIES\n// Calling this function checks all pending queries for completion\nexport function pollGLContext(gl) {\n  queryManager.poll(gl);\n}\n\n// HELPER METHODS\n\nfunction logInfo(gl) {\n  const webGL = isWebGL2(gl) ? 'WebGL2' : 'WebGL1';\n  const info = glGetDebugInfo(gl);\n  const driver = info ? `(${info.vendor},${info.renderer})` : '';\n  const debug = gl.debug ? ' debug' : '';\n  log.once(0, `${webGL}${debug} context ${driver}`)();\n}\n"],"file":"context.js"}