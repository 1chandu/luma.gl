'use strict';

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function vertexAttribDivisor(gl, index, divisor) {
  var ext = gl.getExtension('ANGLE_instanced_arrays');
  (0, _assert2.default)(gl, 'ANGLE_instanced_arrays');
  return ext.vertexAttribDivisorANGLE(index, divisor);
}

// GLenum mode, GLint first, GLsizei count, GLsizei instanceCount
// WebGL2 Polyfills for instanced rendering
// using ANGLE_instanced_arrays extension

/* eslint-disable max-params */
/* global WebGLRenderingContext, WebGL2RenderingContext */
function drawArraysInstanced(gl, mode, first, count, instanceCount) {
  var ext = gl.getExtension('ANGLE_instanced_arrays');
  (0, _assert2.default)(gl, 'ANGLE_instanced_arrays');
  return ext.drawArraysInstancedANGLE(mode, first, count, instanceCount);
}

// GLenum mode, GLsizei count, GLenum type,
// GLintptr offset, GLsizei instanceCount
function drawElementsInstanced(gl, mode, count, type, offset, instanceCount) {
  var ext = gl.getExtension('ANGLE_instanced_arrays');
  (0, _assert2.default)(gl, 'ANGLE_instanced_arrays');
  return ext.drawElementsInstancedANGLE(mode, count, type, offset, instanceCount);
}

// Only add if WebGL2RenderingContext is not available
if (!WebGL2RenderingContext) {

  var prototype = WebGLRenderingContext.prototype;

  prototype.vertexAttribDivisor = prototype.vertexAttribDivisor || vertexAttribDivisor;

  prototype.drawArraysInstanced = prototype.drawArraysInstanced || drawArraysInstanced;

  prototype.drawElementsInstanced = prototype.drawElementsInstanced || drawElementsInstanced;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93ZWJnbC93ZWJnbDIvcG9seWZpbGwvaW5zdGFuY2VkLWFycmF5cy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQU9BLFNBQVMsbUJBQVQsQ0FBNkIsRUFBN0IsRUFBaUMsS0FBakMsRUFBd0MsT0FBeEMsRUFBaUQ7QUFDL0MsTUFBTSxNQUFNLEdBQUcsWUFBSCxDQUFnQix3QkFBaEIsQ0FBTixDQUR5QztBQUUvQyx3QkFBTyxFQUFQLEVBQVcsd0JBQVgsRUFGK0M7QUFHL0MsU0FBTyxJQUFJLHdCQUFKLENBQTZCLEtBQTdCLEVBQW9DLE9BQXBDLENBQVAsQ0FIK0M7Q0FBakQ7Ozs7Ozs7O0FBT0EsU0FBUyxtQkFBVCxDQUE2QixFQUE3QixFQUFpQyxJQUFqQyxFQUF1QyxLQUF2QyxFQUE4QyxLQUE5QyxFQUFxRCxhQUFyRCxFQUFvRTtBQUNsRSxNQUFNLE1BQU0sR0FBRyxZQUFILENBQWdCLHdCQUFoQixDQUFOLENBRDREO0FBRWxFLHdCQUFPLEVBQVAsRUFBVyx3QkFBWCxFQUZrRTtBQUdsRSxTQUFPLElBQUksd0JBQUosQ0FBNkIsSUFBN0IsRUFBbUMsS0FBbkMsRUFBMEMsS0FBMUMsRUFBaUQsYUFBakQsQ0FBUCxDQUhrRTtDQUFwRTs7OztBQVFBLFNBQVMscUJBQVQsQ0FBK0IsRUFBL0IsRUFBbUMsSUFBbkMsRUFBeUMsS0FBekMsRUFBZ0QsSUFBaEQsRUFBc0QsTUFBdEQsRUFBOEQsYUFBOUQsRUFBNkU7QUFDM0UsTUFBTSxNQUFNLEdBQUcsWUFBSCxDQUFnQix3QkFBaEIsQ0FBTixDQURxRTtBQUUzRSx3QkFBTyxFQUFQLEVBQVcsd0JBQVgsRUFGMkU7QUFHM0UsU0FBTyxJQUFJLDBCQUFKLENBQ0wsSUFESyxFQUNDLEtBREQsRUFDUSxJQURSLEVBQ2MsTUFEZCxFQUNzQixhQUR0QixDQUFQLENBSDJFO0NBQTdFOzs7QUFTQSxJQUFJLENBQUMsc0JBQUQsRUFBeUI7O0FBRTNCLE1BQU0sWUFBWSxzQkFBc0IsU0FBdEIsQ0FGUzs7QUFJM0IsWUFBVSxtQkFBVixHQUFnQyxVQUFVLG1CQUFWLElBQzlCLG1CQUQ4QixDQUpMOztBQU8zQixZQUFVLG1CQUFWLEdBQWdDLFVBQVUsbUJBQVYsSUFDOUIsbUJBRDhCLENBUEw7O0FBVTNCLFlBQVUscUJBQVYsR0FBa0MsVUFBVSxxQkFBVixJQUNoQyxxQkFEZ0MsQ0FWUDtDQUE3QiIsImZpbGUiOiJpbnN0YW5jZWQtYXJyYXlzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gV2ViR0wyIFBvbHlmaWxscyBmb3IgaW5zdGFuY2VkIHJlbmRlcmluZ1xuLy8gdXNpbmcgQU5HTEVfaW5zdGFuY2VkX2FycmF5cyBleHRlbnNpb25cblxuLyogZXNsaW50LWRpc2FibGUgbWF4LXBhcmFtcyAqL1xuLyogZ2xvYmFsIFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCAqL1xuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xuXG5mdW5jdGlvbiB2ZXJ0ZXhBdHRyaWJEaXZpc29yKGdsLCBpbmRleCwgZGl2aXNvcikge1xuICBjb25zdCBleHQgPSBnbC5nZXRFeHRlbnNpb24oJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnKTtcbiAgYXNzZXJ0KGdsLCAnQU5HTEVfaW5zdGFuY2VkX2FycmF5cycpO1xuICByZXR1cm4gZXh0LnZlcnRleEF0dHJpYkRpdmlzb3JBTkdMRShpbmRleCwgZGl2aXNvcik7XG59XG5cbi8vIEdMZW51bSBtb2RlLCBHTGludCBmaXJzdCwgR0xzaXplaSBjb3VudCwgR0xzaXplaSBpbnN0YW5jZUNvdW50XG5mdW5jdGlvbiBkcmF3QXJyYXlzSW5zdGFuY2VkKGdsLCBtb2RlLCBmaXJzdCwgY291bnQsIGluc3RhbmNlQ291bnQpIHtcbiAgY29uc3QgZXh0ID0gZ2wuZ2V0RXh0ZW5zaW9uKCdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyk7XG4gIGFzc2VydChnbCwgJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnKTtcbiAgcmV0dXJuIGV4dC5kcmF3QXJyYXlzSW5zdGFuY2VkQU5HTEUobW9kZSwgZmlyc3QsIGNvdW50LCBpbnN0YW5jZUNvdW50KTtcbn1cblxuLy8gR0xlbnVtIG1vZGUsIEdMc2l6ZWkgY291bnQsIEdMZW51bSB0eXBlLFxuLy8gR0xpbnRwdHIgb2Zmc2V0LCBHTHNpemVpIGluc3RhbmNlQ291bnRcbmZ1bmN0aW9uIGRyYXdFbGVtZW50c0luc3RhbmNlZChnbCwgbW9kZSwgY291bnQsIHR5cGUsIG9mZnNldCwgaW5zdGFuY2VDb3VudCkge1xuICBjb25zdCBleHQgPSBnbC5nZXRFeHRlbnNpb24oJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnKTtcbiAgYXNzZXJ0KGdsLCAnQU5HTEVfaW5zdGFuY2VkX2FycmF5cycpO1xuICByZXR1cm4gZXh0LmRyYXdFbGVtZW50c0luc3RhbmNlZEFOR0xFKFxuICAgIG1vZGUsIGNvdW50LCB0eXBlLCBvZmZzZXQsIGluc3RhbmNlQ291bnRcbiAgKTtcbn1cblxuLy8gT25seSBhZGQgaWYgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCBpcyBub3QgYXZhaWxhYmxlXG5pZiAoIVdlYkdMMlJlbmRlcmluZ0NvbnRleHQpIHtcblxuICBjb25zdCBwcm90b3R5cGUgPSBXZWJHTFJlbmRlcmluZ0NvbnRleHQucHJvdG90eXBlO1xuXG4gIHByb3RvdHlwZS52ZXJ0ZXhBdHRyaWJEaXZpc29yID0gcHJvdG90eXBlLnZlcnRleEF0dHJpYkRpdmlzb3IgfHxcbiAgICB2ZXJ0ZXhBdHRyaWJEaXZpc29yO1xuXG4gIHByb3RvdHlwZS5kcmF3QXJyYXlzSW5zdGFuY2VkID0gcHJvdG90eXBlLmRyYXdBcnJheXNJbnN0YW5jZWQgfHxcbiAgICBkcmF3QXJyYXlzSW5zdGFuY2VkO1xuXG4gIHByb3RvdHlwZS5kcmF3RWxlbWVudHNJbnN0YW5jZWQgPSBwcm90b3R5cGUuZHJhd0VsZW1lbnRzSW5zdGFuY2VkIHx8XG4gICAgZHJhd0VsZW1lbnRzSW5zdGFuY2VkO1xuXG59XG4iXX0=