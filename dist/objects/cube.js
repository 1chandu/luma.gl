'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CubeGeometry = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _geometry = require('../geometry');

var _geometry2 = _interopRequireDefault(_geometry);

var _scenegraph = require('../scenegraph');

var _types = require('../webgl/types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable no-multi-spaces, indent */
var CUBE_INDICES = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23];

var CUBE_VERTICES = [-1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1];

var CUBE_NORMALS = [
// Front face
0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0,

// Back face
0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0,

// Top face
0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,

// Bottom face
0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0,

// Right face
1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0,

// Left face
-1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0];

var CUBE_TEX_COORDS = [
// Front face
0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0,

// Back face
1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0,

// Top face
0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0,

// Bottom face
1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,

// Right face
1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0,

// Left face
0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0];
/* eslint-enable no-multi-spaces, indent */

var CubeGeometry = exports.CubeGeometry = function (_Geometry) {
  _inherits(CubeGeometry, _Geometry);

  function CubeGeometry() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, CubeGeometry);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(CubeGeometry).call(this, _extends({
      attributes: {
        indices: (0, _types.makeTypedArray)(Uint16Array, CUBE_INDICES),
        vertices: (0, _types.makeTypedArray)(Float32Array, CUBE_VERTICES),
        normals: (0, _types.makeTypedArray)(Float32Array, CUBE_NORMALS),
        texCoords: (0, _types.makeTypedArray)(Float32Array, CUBE_TEX_COORDS)
      }
    }, opts)));
  }

  return CubeGeometry;
}(_geometry2.default);

var Cube = function (_Model) {
  _inherits(Cube, _Model);

  function Cube() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Cube);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Cube).call(this, _extends({ geometry: new CubeGeometry(opts) }, opts)));
  }

  return Cube;
}(_scenegraph.Model);

exports.default = Cube;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vYmplY3RzL2N1YmUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFLQSxJQUFNLGVBQWUsQ0FDbkIsQ0FEbUIsRUFDaEIsQ0FEZ0IsRUFDYixDQURhLEVBQ1YsQ0FEVSxFQUNQLENBRE8sRUFDSixDQURJLEVBRW5CLENBRm1CLEVBRWhCLENBRmdCLEVBRWIsQ0FGYSxFQUVWLENBRlUsRUFFUCxDQUZPLEVBRUosQ0FGSSxFQUduQixDQUhtQixFQUdoQixDQUhnQixFQUdiLEVBSGEsRUFHVCxDQUhTLEVBR04sRUFITSxFQUdGLEVBSEUsRUFJbkIsRUFKbUIsRUFJZixFQUplLEVBSVgsRUFKVyxFQUlQLEVBSk8sRUFJSCxFQUpHLEVBSUMsRUFKRCxFQUtuQixFQUxtQixFQUtmLEVBTGUsRUFLWCxFQUxXLEVBS1AsRUFMTyxFQUtILEVBTEcsRUFLQyxFQUxELEVBTW5CLEVBTm1CLEVBTWYsRUFOZSxFQU1YLEVBTlcsRUFNUCxFQU5PLEVBTUgsRUFORyxFQU1DLEVBTkQsQ0FBZjs7QUFTTixJQUFNLGdCQUFnQixDQUNwQixDQUFDLENBQUQsRUFBSSxDQUFDLENBQUQsRUFBSyxDQURXLEVBRW5CLENBRm1CLEVBRWhCLENBQUMsQ0FBRCxFQUFLLENBRlcsRUFHbkIsQ0FIbUIsRUFHZixDQUhlLEVBR1gsQ0FIVyxFQUlwQixDQUFDLENBQUQsRUFBSyxDQUplLEVBSVgsQ0FKVyxFQU1wQixDQUFDLENBQUQsRUFBSSxDQUFDLENBQUQsRUFBSSxDQUFDLENBQUQsRUFDUixDQUFDLENBQUQsRUFBSyxDQVBlLEVBT1osQ0FBQyxDQUFELEVBQ1AsQ0FSbUIsRUFRZixDQVJlLEVBUVosQ0FBQyxDQUFELEVBQ1AsQ0FUbUIsRUFTaEIsQ0FBQyxDQUFELEVBQUksQ0FBQyxDQUFELEVBRVIsQ0FBQyxDQUFELEVBQUssQ0FYZSxFQVdaLENBQUMsQ0FBRCxFQUNSLENBQUMsQ0FBRCxFQUFLLENBWmUsRUFZWCxD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RUFpQnRCLEdBakJzQixFQWlCakIsR0FqQmlCOzs7QUFvQnRCLEdBcEJzQixFQW9CakIsR0FwQmlCLEVBcUJ0QixHQXJCc0IsRUFxQmpCLEdBckJpQixFQXNCdEIsR0F0QnNCLEVBc0JqQixHQXRCaUIsRUF1QnRCLEdBdkJzQixFQXVCakIsR0F2QmlCOzs7QUEwQnRCLEdBMUJzQixFQTBCakIsR0ExQmlCLEVBMkJ0QixHQTNCc0IsRUEyQmpCLEdBM0JpQixFQTRCdEIsR0E1QnNCLEVBNEJqQixHQTVCaUIsRUE2QnRCLEdBN0JzQixFQTZCakIsR0E3QmlCOzs7QUFnQ3RCLEdBaENzQixFQWdDakIsR0FoQ2lCLEVBaUN0QixHQWpDc0IsRUFpQ2pCLEdBakNpQixFQWtDdEIsR0FsQ3NCLEVBa0NqQixHQWxDaUIsRUFtQ3RCLEdBbkNzQixFQW1DakIsR0FuQ2lCLENBQWxCOzs7SUF1Q087OztBQUNYLFdBRFcsWUFDWCxHQUF1QjtRQUFYLDZEQUFPLGtCQUFJOzswQkFEWixjQUNZOztrRUFEWjtBQUdQLGtCQUFZO0FBQ1YsaUJBQVMsMkJBQWUsV0FBZixFQUE0QixZQUE1QixDQUFUO0FBQ0Esa0JBQVUsMkJBQWUsWUFBZixFQUE2QixhQUE3QixDQUFWO0FBQ0EsaUJBQVMsMkJBQWUsWUFBZixFQUE2QixZQUE3QixDQUFUO0FBQ0EsbUJBQVcsMkJBQWUsWUFBZixFQUE2QixlQUE3QixDQUFYO09BSkY7T0FNRyxRQVJnQjtHQUF2Qjs7U0FEVzs7O0lBY1E7OztBQUNuQixXQURtQixJQUNuQixHQUF1QjtRQUFYLDZEQUFPLGtCQUFJOzswQkFESixNQUNJOztrRUFESiw0QkFFVixVQUFVLElBQUksWUFBSixDQUFpQixJQUFqQixDQUFWLElBQXFDLFFBRHZCO0dBQXZCOztTQURtQiIsImZpbGUiOiJjdWJlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEdlb21ldHJ5IGZyb20gJy4uL2dlb21ldHJ5JztcbmltcG9ydCB7TW9kZWx9IGZyb20gJy4uL3NjZW5lZ3JhcGgnO1xuaW1wb3J0IHttYWtlVHlwZWRBcnJheX0gZnJvbSAnLi4vd2ViZ2wvdHlwZXMnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1tdWx0aS1zcGFjZXMsIGluZGVudCAqL1xuY29uc3QgQ1VCRV9JTkRJQ0VTID0gW1xuICAwLCAxLCAyLCAwLCAyLCAzLFxuICA0LCA1LCA2LCA0LCA2LCA3LFxuICA4LCA5LCAxMCwgOCwgMTAsIDExLFxuICAxMiwgMTMsIDE0LCAxMiwgMTQsIDE1LFxuICAxNiwgMTcsIDE4LCAxNiwgMTgsIDE5LFxuICAyMCwgMjEsIDIyLCAyMCwgMjIsIDIzXG5dO1xuXG5jb25zdCBDVUJFX1ZFUlRJQ0VTID0gW1xuICAtMSwgLTEsICAxLFxuICAgMSwgLTEsICAxLFxuICAgMSwgIDEsICAxLFxuICAtMSwgIDEsICAxLFxuXG4gIC0xLCAtMSwgLTEsXG4gIC0xLCAgMSwgLTEsXG4gICAxLCAgMSwgLTEsXG4gICAxLCAtMSwgLTEsXG5cbiAgLTEsICAxLCAtMSxcbiAgLTEsICAxLCAgMSxcbiAgIDEsICAxLCAgMSxcbiAgIDEsICAxLCAtMSxcblxuICAtMSwgLTEsIC0xLFxuICAgMSwgLTEsIC0xLFxuICAgMSwgLTEsICAxLFxuICAtMSwgLTEsICAxLFxuXG4gICAxLCAtMSwgLTEsXG4gICAxLCAgMSwgLTEsXG4gICAxLCAgMSwgIDEsXG4gICAxLCAtMSwgIDEsXG5cbiAgLTEsIC0xLCAtMSxcbiAgLTEsIC0xLCAgMSxcbiAgLTEsICAxLCAgMSxcbiAgLTEsICAxLCAtMVxuXTtcblxuY29uc3QgQ1VCRV9OT1JNQUxTID0gW1xuICAvLyBGcm9udCBmYWNlXG4gIDAuMCwgIDAuMCwgIDEuMCxcbiAgMC4wLCAgMC4wLCAgMS4wLFxuICAwLjAsICAwLjAsICAxLjAsXG4gIDAuMCwgIDAuMCwgIDEuMCxcblxuICAvLyBCYWNrIGZhY2VcbiAgMC4wLCAgMC4wLCAtMS4wLFxuICAwLjAsICAwLjAsIC0xLjAsXG4gIDAuMCwgIDAuMCwgLTEuMCxcbiAgMC4wLCAgMC4wLCAtMS4wLFxuXG4gIC8vIFRvcCBmYWNlXG4gIDAuMCwgIDEuMCwgIDAuMCxcbiAgMC4wLCAgMS4wLCAgMC4wLFxuICAwLjAsICAxLjAsICAwLjAsXG4gIDAuMCwgIDEuMCwgIDAuMCxcblxuICAvLyBCb3R0b20gZmFjZVxuICAwLjAsIC0xLjAsICAwLjAsXG4gIDAuMCwgLTEuMCwgIDAuMCxcbiAgMC4wLCAtMS4wLCAgMC4wLFxuICAwLjAsIC0xLjAsICAwLjAsXG5cbiAgLy8gUmlnaHQgZmFjZVxuICAxLjAsICAwLjAsICAwLjAsXG4gIDEuMCwgIDAuMCwgIDAuMCxcbiAgMS4wLCAgMC4wLCAgMC4wLFxuICAxLjAsICAwLjAsICAwLjAsXG5cbiAgLy8gTGVmdCBmYWNlXG4gIC0xLjAsICAwLjAsICAwLjAsXG4gIC0xLjAsICAwLjAsICAwLjAsXG4gIC0xLjAsICAwLjAsICAwLjAsXG4gIC0xLjAsICAwLjAsICAwLjBcbl07XG5cbmNvbnN0IENVQkVfVEVYX0NPT1JEUyA9IFtcbiAgLy8gRnJvbnQgZmFjZVxuICAwLjAsIDAuMCxcbiAgMS4wLCAwLjAsXG4gIDEuMCwgMS4wLFxuICAwLjAsIDEuMCxcblxuICAvLyBCYWNrIGZhY2VcbiAgMS4wLCAwLjAsXG4gIDEuMCwgMS4wLFxuICAwLjAsIDEuMCxcbiAgMC4wLCAwLjAsXG5cbiAgLy8gVG9wIGZhY2VcbiAgMC4wLCAxLjAsXG4gIDAuMCwgMC4wLFxuICAxLjAsIDAuMCxcbiAgMS4wLCAxLjAsXG5cbiAgLy8gQm90dG9tIGZhY2VcbiAgMS4wLCAxLjAsXG4gIDAuMCwgMS4wLFxuICAwLjAsIDAuMCxcbiAgMS4wLCAwLjAsXG5cbiAgLy8gUmlnaHQgZmFjZVxuICAxLjAsIDAuMCxcbiAgMS4wLCAxLjAsXG4gIDAuMCwgMS4wLFxuICAwLjAsIDAuMCxcblxuICAvLyBMZWZ0IGZhY2VcbiAgMC4wLCAwLjAsXG4gIDEuMCwgMC4wLFxuICAxLjAsIDEuMCxcbiAgMC4wLCAxLjBcbl07XG4vKiBlc2xpbnQtZW5hYmxlIG5vLW11bHRpLXNwYWNlcywgaW5kZW50ICovXG5cbmV4cG9ydCBjbGFzcyBDdWJlR2VvbWV0cnkgZXh0ZW5kcyBHZW9tZXRyeSB7XG4gIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKHtcbiAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgaW5kaWNlczogbWFrZVR5cGVkQXJyYXkoVWludDE2QXJyYXksIENVQkVfSU5ESUNFUyksXG4gICAgICAgIHZlcnRpY2VzOiBtYWtlVHlwZWRBcnJheShGbG9hdDMyQXJyYXksIENVQkVfVkVSVElDRVMpLFxuICAgICAgICBub3JtYWxzOiBtYWtlVHlwZWRBcnJheShGbG9hdDMyQXJyYXksIENVQkVfTk9STUFMUyksXG4gICAgICAgIHRleENvb3JkczogbWFrZVR5cGVkQXJyYXkoRmxvYXQzMkFycmF5LCBDVUJFX1RFWF9DT09SRFMpXG4gICAgICB9LFxuICAgICAgLi4ub3B0c1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEN1YmUgZXh0ZW5kcyBNb2RlbCB7XG4gIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKHtnZW9tZXRyeTogbmV3IEN1YmVHZW9tZXRyeShvcHRzKSwgLi4ub3B0c30pO1xuICB9XG59XG4iXX0=